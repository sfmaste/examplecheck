<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CheckTask</title>
  <link rel="stylesheet" href="/stylemain.css">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
  <%- include('partials/header') %>
    <section>
      <div id="search-results" class="search-results-container"></div>
      <div class="content-profile">
        <%- include('partials/menu') %>
          <div class="content">
            <h2 class="name">мои заметки</h2>

            <!-- Блок привязки Telegram -->
            <div class="card mb-4">
              <div class="card-body">
                <h5 class="card-title">Привязка Telegram для напоминаний</h5>
                <% if (user && user.telegram_id) { %>
                  <div class="alert alert-success">
                    Ваш аккаунт успешно привязан к Telegram
                  </div>
                  <% } else { %>
                    <div class="alert alert-info">
                      Для получения напоминаний в Telegram привяжите свой аккаунт
                    </div>
                    <div class="row g-3 align-items-center">
                      <div class="col-auto">
                      </div>
                      <div class="col-auto">
                        <input type="text" id="telegramCode" class="form-control" placeholder="Введите код из Telegram">
                      </div>
                      <div class="col-auto">
                        <button id="linkTelegramBtn" class="btn btn-success">
                          Привязать
                        </button>
                      </div>
                    </div>
                    <small class="text-muted">
                      1. В Телеграме отправьте боту @CHECKTASK123_bot команду /start<br>
                      2. Далее введите команду /link<br>
                      3. Полученный код введите в поле выше
                    </small>
                    <% } %>
              </div>
            </div>
            <div class="row">
              <% if (notes.length===0) { %>
                <div class="col-12 text-center py-5">
                  <h4 class="text-muted">У вас пока нет заметок со сроком сдачи</h4>
                  <p>Добавьте напоминание на главной странице</p>
                </div>
                <% } else { %>
                  <div class="row" id="notesContainer">
                    <% notes.forEach(note=> { %>
                      <div class="col-md-6 col-lg-4 mb-4" data-note-id="<%= note.note_id %>">
                        <div class="card note-card h-100">
                          <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                              <h5 class="card-title mb-0">
                                <%= note.title %>
                              </h5>
                            </div>
                            <span class="badge <%= getStageClass(note.stage) %>">
                              <%= getStageText(note.stage) %>
                            </span>
                            <span class="badge bg-secondary theme-badge">
                              <%= note.theme %>
                            </span>
                            <small class="text-muted d-block mb-2">
                              <%= new Date(note.time).toLocaleString() %>
                            </small>
                            <p class="card-text">
                              <%= note.description %>
                            </p>
                            <!-- Блок с напоминанием (если установлено) -->
                            <% if (note.deadline) { %>
                              <div class="reminder-info mt-2 mb-2">
                                <% const deadline=new Date(note.deadline); const now=new Date(); const
                                  isExpired=deadline < now; %>

                                  <% if (isExpired) { %>
                                    <div class="d-flex align-items-center">
                                      <i class="fas fa-exclamation-circle me-2" style="color: #dc3545;"></i>
                                      <small class="text-danger fw-bold">ПРОСРОЧЕНО</small>
                                    </div>
                                    <% } else { %>
                                      <div class="d-flex align-items-center">
                                        <i class="far fa-bell me-2" style="color: #6c757d;"></i>
                                        <small class="text-muted">
                                          <%= deadline.toLocaleDateString('ru-RU', { day: 'numeric' , month: 'numeric' ,
                                            year: 'numeric' }) %>,
                                            <%= deadline.toLocaleTimeString('ru-RU', { hour: '2-digit' ,
                                              minute: '2-digit' }) %>
                                        </small>
                                      </div>
                                      <% } %>
                              </div>
                              <% } %>

                                <small class="text-muted d-block mb-2">
                                  Создано: <%= new Date(note.time).toLocaleString('ru-RU') %>
                                </small>
                          </div>
                          <div class="card-footer bg-transparent position-relative pe-0" style="z-index: 10; display: flex;
                          justify-content: space-between;">
                            <div class="dropdown dropstart">
                              <button class="btn btn-sm btn-link text-muted p-0" type="button"
                                id="noteDropdown<%= note.note_id %>" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                              </button>
                              <ul class="dropdown-menu dropdown-menu-end shadow"
                                aria-labelledby="noteDropdown<%= note.note_id %>"
                                style="position: absolute; right: 0; top: 0; transform: translateX(100%); min-width: 180px;">
                                <li>
                                  <button class="dropdown-item archive-note" type="button"
                                    data-note-id="<%= note.note_id %>">
                                    В архив
                                  </button>
                                </li>

                                <!-- Заменяем "Напомнить" на "Удалить время сдачи" -->
                                <% if (note.deadline) { %>
                                  <li>
                                    <button class="dropdown-item remove-deadline" type="button"
                                      data-note-id="<%= note.note_id %>" title="Удалить установленное время сдачи">
                                      Удалить время сдачи
                                    </button>
                                  </li>
                                  <% } %>
                                    <button class="dropdown-item reminder-btn" data-note-id="<%= note.note_id %>">
                                      Изменить время
                                    </button>
                                    <li>
                                      <button class="dropdown-item edit-note" data-note-id="<%= note.note_id %>">
                                        Редактировать
                                      </button>
                                    </li>
                                    <li>
                                      <hr class="dropdown-divider m-0">
                                    </li>
                                    <li>
                                      <a class="dropdown-item text-danger delete-note" href="#"
                                        data-note-id="<%= note.note_id %>">
                                        Удалить
                                      </a>
                                    </li>
                              </ul>
                            </div>
                          </div>
                        </div>
                      </div>
                      <% }); %>
                  </div>
                  <% } %>
            </div>

          </div>
          <div class="modal fade" id="editNoteModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Редактировать заметку</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <form id="editNoteForm" enctype="multipart/form-data">
                    <input type="hidden" id="editNoteId" name="note_id">
                    <div class="mb-3">
                      <label class="form-label">Заголовок</label>
                      <input type="text" class="form-control" id="editNoteTitle" name="title" required>
                    </div>
                    <div class="mb-3">
                      <label class="form-label">Тема</label>
                      <select class="form-select" id="editNoteTheme" name="theme" required>
                        <option value="Работа">Работа</option>
                        <option value="Личное">Личное</option>
                        <option value="Учеба">Учеба</option>
                        <option value="Проекты">Проекты</option>
                        <option value="Другое">Другое</option>
                      </select>
                    </div>
                    <div class="mb-3">
                      <label class="form-label">Стадия выполнения</label>
                      <select class="form-select" id="editNoteStage" name="stage" required>
                        <option value="planned">Запланировано</option>
                        <option value="in_progress">В работе</option>
                        <option value="testing">Тестирование</option>
                        <option value="completed">Завершено</option>
                      </select>
                    </div>
                    <div class="mb-3">
                      <label class="form-label">Описание</label>
                      <textarea class="form-control" id="editNoteDescription" name="description" rows="3"
                        required></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">
                      <span id="editSubmitText">Сохранить</span>
                      <span id="editSubmitSpinner" class="spinner-border spinner-border-sm d-none"></span>
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
          <div class="modal fade" id="reminderModal" tabindex="-1">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title">Установить напоминание</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                  <form id="reminderForm">
                    <input type="hidden" id="noteIdInput">
                    <div class="mb-3">
                      <label for="reminderDate" class="form-label">Дата и время напоминания:</label>
                      <input type="datetime-local" class="form-control" id="reminderDate" required>
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                  <button type="button" class="btn btn-success" id="saveReminderBtn">Сохранить</button>
                </div>
              </div>
            </div>
          </div>
      </div>

    </section>
    <%- include('partials/footer') %>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
      <script>
        // Получаем элементы
        const menuToggle = document.querySelector('.menu-toggle');
        const sidebar = document.querySelector('.main-menu');

        // Добавляем событие клика на кнопку
        menuToggle.addEventListener('click', () => {
          // Переключаем класс hidden
          sidebar.classList.toggle('hidden');
        });
        // Добавляем недостающие функции
        function getThemeClass(theme) {
          const themes = {
            'Работа': 'bg-primary',
            'Личное': 'bg-danger',
            'Учеба': 'bg-info',
            'Проекты': 'bg-warning',
            'Другое': 'bg-secondary'
          };
          return themes[theme] || 'bg-secondary';
        }

        function getStageClass(stage) {
          const classes = {
            'planned': 'bg-secondary',
            'in_progress': 'bg-primary',
            'testing': 'bg-warning text-dark',
            'completed': 'bg-success'
          };
          return classes[stage] || 'bg-secondary';
        }

        function getStageText(stage) {
          const texts = {
            'planned': 'Запланировано',
            'in_progress': 'В работе',
            'testing': 'Тестирование',
            'completed': 'Завершено'
          };
          return texts[stage] || stage;
        }


        function formatDescription(text) {
          // Простая обработка переносов строк
          return text.replace(/\n/g, '<br>');
        }

        function showAlert(title, text, type) {
          Swal.fire({
            title: title,
            text: text,
            icon: type,
            confirmButtonText: 'OK'
          });
        }

        // Удаление заметки
        document.addEventListener('click', async (e) => {
          if (e.target.classList.contains('delete-note')) {
            const noteId = e.target.dataset.noteId;
            if (confirm('Удалить эту заметку?')) {
              try {
                const response = await fetch(`/notes/${noteId}`, {
                  method: 'DELETE'
                });

                if (response.ok) {
                  document.querySelector(`[data-note-id="${noteId}"]`).remove();
                  showAlert('Успех!', 'Заметка удалена', 'success');
                } else {
                  throw new Error('Ошибка сервера');
                }
              } catch (error) {
                showAlert('Ошибка!', error.message, 'danger');
              }
            }
          }
        });

        // Редактирование заметки
        document.addEventListener('click', async (e) => {
          if (e.target.classList.contains('edit-note')) {
            const noteId = e.target.dataset.noteId;
            try {
              const modal = new bootstrap.Modal(document.getElementById('editNoteModal'));
              const submitBtn = document.querySelector('#editNoteForm button[type="submit"]');
              submitBtn.disabled = true;

              // Загрузка данных заметки
              const response = await fetch(`/api/notes/${noteId}`);
              if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.error || 'Не удалось загрузить заметку');
              }
              const note = await response.json();

              // Заполнение формы
              document.getElementById('editNoteId').value = note.note_id;
              document.getElementById('editNoteTitle').value = note.title || '';
              document.getElementById('editNoteTheme').value = note.theme || '';
              document.getElementById('editNoteStage').value = note.stage || '';
              document.getElementById('editNoteDescription').value = note.description || '';

              modal.show();
              submitBtn.disabled = false;
            } catch (error) {
              console.error('Error:', error);
              showAlert('Ошибка!', error.message, 'danger');
            }
          }
        });

        function updateNoteInUI(updatedNote) {
          const noteElement = document.querySelector(`.note-card[data-note-id="${updatedNote.note_id}"]`);
          if (!noteElement) {
            console.error('Элемент заметки не найден в DOM');
            return;
          }

          // Обновляем заголовок
          const titleElement = noteElement.querySelector('.card-title');
          if (titleElement) {
            titleElement.textContent = updatedNote.title;
          }

          // Обновляем статус
          const stageBadge = noteElement.querySelector('.badge:first-child');
          if (stageBadge) {
            stageBadge.className = `badge ${getStageClass(updatedNote.stage)}`;
            stageBadge.textContent = getStageText(updatedNote.stage);
          }

          // Обновляем тему
          const themeBadge = noteElement.querySelector('.theme-badge');
          if (themeBadge) {
            themeBadge.className = `badge ${getThemeClass(updatedNote.theme)} theme-badge`;
            themeBadge.textContent = updatedNote.theme;
          }

          // Обновляем описание
          const descriptionElement = noteElement.querySelector('.card-text');
          if (descriptionElement) {
            descriptionElement.textContent = updatedNote.description;
          }
        }

        // Обработчик отправки формы редактирования
        document.getElementById('editNoteForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          const form = e.target;
          const submitBtn = form.querySelector('button[type="submit"]');
          const submitText = document.getElementById('editSubmitText');
          const submitSpinner = document.getElementById('editSubmitSpinner');

          submitBtn.disabled = true;
          submitText.textContent = 'Сохранение...';
          submitSpinner.classList.remove('d-none');

          try {
            const data = new URLSearchParams(new FormData(form));

            const response = await fetch(`/api/notes/${form.editNoteId.value}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
              },
              body: data.toString(),
            });

            if (!response.ok) {
              const errorData = await response.json().catch(() => ({}));
              throw new Error(errorData.error || 'Ошибка при обновлении заметки');
            }

            const result = await response.json();
            updateNoteInUI(result.note);

            const modal = bootstrap.Modal.getInstance(document.getElementById('editNoteModal'));
            if (modal) {
              modal.hide();
            }

            showAlert('Успех!', 'Заметка обновлена', 'success');
          } catch (error) {
            console.error('Error:', error);
            showAlert('Ошибка!', error.message, 'danger');
          } finally {
            submitBtn.disabled = false;
            submitText.textContent = 'Сохранить';
            submitSpinner.classList.add('d-none');
          }
        });

        document.addEventListener('DOMContentLoaded', function () {
          // Обработчик для кнопки "В архив"
          document.querySelectorAll('.archive-note').forEach(button => {
            button.addEventListener('click', async function (e) {
              e.preventDefault();
              const noteId = this.dataset.noteId;

              try {
                const response = await fetch(`/api/notes/${noteId}/archive`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                if (response.ok) {
                  // Удаляем карточку из DOM
                  const card = this.closest('.col-md-6');
                  card.style.opacity = '0';
                  setTimeout(() => card.remove(), 300);

                  // Обновляем счетчик или показываем сообщение, если заметок нет
                  if (document.querySelectorAll('.note-card').length === 1) {
                    window.location.reload();
                  }
                } else {
                  console.error('Ошибка архивирования');
                }
              } catch (err) {
                console.error('Ошибка:', err);
                alert('Произошла ошибка при архивировании');
              }
            });
          });
        });

        // поиск
        document.addEventListener('DOMContentLoaded', function () {
          const searchInput = document.getElementById('search');
          const searchButton = document.getElementById('search-button');
          const clearButton = document.getElementById('clear-search');
          const notesContainer = document.getElementById('notesContainer');
          const allNotes = Array.from(document.querySelectorAll('.note-card'));

          // Сохраняем оригинальный текст для восстановления после поиска
          allNotes.forEach(note => {
            note.dataset.originalTitle = note.querySelector('.card-title').textContent;
            note.dataset.originalDescription = note.querySelector('.card-text').textContent;
          });

          function highlightMatches(text, searchTerm) {
            if (!searchTerm) return text;
            const regex = new RegExp(`(${escapeRegExp(searchTerm)})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
          }

          function escapeRegExp(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }

          function performSearch() {
            const searchTerm = searchInput.value.trim().toLowerCase();

            allNotes.forEach(note => {
              const originalTitle = note.dataset.originalTitle;
              const originalDescription = note.dataset.originalDescription;

              const title = originalTitle.toLowerCase();
              const description = originalDescription.toLowerCase();
              const theme = note.querySelector('.theme-badge').textContent.toLowerCase();

              if (!searchTerm || title.includes(searchTerm) || description.includes(searchTerm) || theme.includes(searchTerm)) {
                note.style.display = '';
                note.querySelector('.card-title').innerHTML = highlightMatches(originalTitle, searchTerm);
                note.querySelector('.card-text').innerHTML = highlightMatches(originalDescription, searchTerm);
              } else {
                note.style.display = 'none';
              }
            });
          }

          function clearSearch() {
            searchInput.value = '';
            allNotes.forEach(note => {
              note.style.display = '';
              note.querySelector('.card-title').textContent = note.dataset.originalTitle;
              note.querySelector('.card-text').textContent = note.dataset.originalDescription;
            });
          }

          searchInput.addEventListener('input', debounce(performSearch, 300));
          searchButton.addEventListener('click', performSearch);
          clearButton.addEventListener('click', clearSearch);

          searchInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') performSearch();
          });

          function debounce(func, timeout = 300) {
            let timer;
            return (...args) => {
              clearTimeout(timer);
              timer = setTimeout(() => { func.apply(this, args); }, timeout);
            };
          }
        });

        $(document).ready(function () {
          // Генерация кода привязки
          $('#generateCodeBtn').click(function () {
            $.post('/api/generate-link-code', function (response) {
              if (response.success) {
                $('#telegramCode').val(response.code); // Автозаполнение кода
                alert('Код сгенерирован! Теперь отправьте боту команду /link');
              } else {
                alert('Ошибка: ' + response.error);
              }
            }).fail(function () {
              alert('Ошибка сервера');
            });
          });

          // Привязка Telegram аккаунта
          $('#linkTelegramBtn').click(function () {
            const code = $('#telegramCode').val().trim();
            if (!code) {
              alert('Введите код привязки');
              return;
            }

            $.post('/api/link-telegram', { code: code }, function (response) {
              if (response.success) {
                alert('Аккаунт успешно привязан!');
                location.reload();
              } else {
                alert('Ошибка: ' + response.error);
              }
            }).fail(function () {
              alert('Ошибка сервера');
            });
          });
        });

        // Обработка напоминаний
        $('.reminder-btn').click(function () {
          const noteId = $(this).data('note-id');
          $('#reminderNoteId').val(noteId);
          $('#reminderModal').modal('show');
        });

        $('#saveReminderBtn').click(function () {
          const noteId = $('#reminderNoteId').val();
          const reminderDate = $('#reminderDate').val();

          $.post('/set-reminder', {
            noteId: noteId,
            reminderDate: reminderDate
          }, function () {
            $('#reminderModal').modal('hide');
            location.reload();
          }).fail(function () {
            alert('Ошибка при установке напоминания');
          });
        });

        $(document).ready(function () {
          // Обработчик для удаления времени сдачи
          $(document).on('click', '.remove-deadline', function () {
            const noteId = $(this).data('note-id');

            if (confirm('Вы уверены, что хотите удалить время сдачи для этой заметки?')) {
              $.post('/remove-deadline', { noteId: noteId }, function () {
                location.reload(); // Перезагружаем страницу после удаления
              }).fail(function () {
                alert('Ошибка при удалении времени сдачи');
              });
            }
          });
        });

        // Объявляем modal в более широкой области видимости
        let reminderModal = null;

        // Обработка клика по кнопке "Напомнить"
        document.querySelectorAll('.reminder-btn').forEach(btn => {
          btn.addEventListener('click', function () {
            const noteId = this.dataset.noteId;
            document.getElementById('noteIdInput').value = noteId;
            // Инициализируем modal и сохраняем в переменную
            reminderModal = new bootstrap.Modal(document.getElementById('reminderModal'));
            reminderModal.show();
          });
        });

        // Сохранение напоминания
        document.getElementById('saveReminderBtn').addEventListener('click', function () {
          const noteId = document.getElementById('noteIdInput').value;
          const reminderDate = document.getElementById('reminderDate').value;

          if (!noteId || !reminderDate) {
            alert('Пожалуйста, заполните все поля');
            return;
          }

          fetch('/set-reminder', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `noteId=${noteId}&reminderDate=${reminderDate}`
          }).then(response => {
            if (response.ok) {
              if (reminderModal) {
                reminderModal.hide();
              }
              alert('Напоминание установлено!');
              window.location.href = '/time';
            } else {
              throw new Error('Ошибка при установке напоминания');
            }
          }).catch(error => {
            console.error('Error:', error);
            alert(error.message);
          });
        });
      </script>
</body>

</html>